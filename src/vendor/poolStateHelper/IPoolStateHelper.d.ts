/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPoolStateHelperInterface extends ethers.utils.Interface {
  functions: {
    "fullCommitPeriod(address)": FunctionFragment;
    "getCommitQueue(address,uint256)": FunctionFragment;
    "getExpectedState(address,uint256)": FunctionFragment;
    "getPoolInfo(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "fullCommitPeriod",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommitQueue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpectedState",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "fullCommitPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommitQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpectedState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;

  events: {};
}

export class IPoolStateHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPoolStateHelperInterface;

  functions: {
    fullCommitPeriod(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCommitQueue(
      committer: string,
      periods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          longMintSettlement: BigNumber;
          longBurnPoolTokens: BigNumber;
          shortMintSettlement: BigNumber;
          shortBurnPoolTokens: BigNumber;
          shortBurnLongMintPoolTokens: BigNumber;
          longBurnShortMintPoolTokens: BigNumber;
        })[]
      ] & {
        commitQueue: ([
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          longMintSettlement: BigNumber;
          longBurnPoolTokens: BigNumber;
          shortMintSettlement: BigNumber;
          shortBurnPoolTokens: BigNumber;
          shortBurnLongMintPoolTokens: BigNumber;
          longBurnShortMintPoolTokens: BigNumber;
        })[];
      }
    >;

    getExpectedState(
      pool: string,
      periods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          cumulativePendingMintSettlement: BigNumber;
          longSupply: BigNumber;
          longBalance: BigNumber;
          shortSupply: BigNumber;
          shortBalance: BigNumber;
          oraclePrice: BigNumber;
        }
      ] & {
        finalExpectedPoolState: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          cumulativePendingMintSettlement: BigNumber;
          longSupply: BigNumber;
          longBalance: BigNumber;
          shortSupply: BigNumber;
          shortBalance: BigNumber;
          oraclePrice: BigNumber;
        };
      }
    >;

    getPoolInfo(
      pool: string,
      committer: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          }
        ] & {
          long: [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          };
          short: [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          };
        }
      ] & {
        poolInfo: [
          [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          }
        ] & {
          long: [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          };
          short: [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          };
        };
      }
    >;
  };

  fullCommitPeriod(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  getCommitQueue(
    committer: string,
    periods: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      longMintSettlement: BigNumber;
      longBurnPoolTokens: BigNumber;
      shortMintSettlement: BigNumber;
      shortBurnPoolTokens: BigNumber;
      shortBurnLongMintPoolTokens: BigNumber;
      longBurnShortMintPoolTokens: BigNumber;
    })[]
  >;

  getExpectedState(
    pool: string,
    periods: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      cumulativePendingMintSettlement: BigNumber;
      longSupply: BigNumber;
      longBalance: BigNumber;
      shortSupply: BigNumber;
      shortBalance: BigNumber;
      oraclePrice: BigNumber;
    }
  >;

  getPoolInfo(
    pool: string,
    committer: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber] & {
        supply: BigNumber;
        settlementBalance: BigNumber;
        pendingBurnPoolTokens: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber] & {
        supply: BigNumber;
        settlementBalance: BigNumber;
        pendingBurnPoolTokens: BigNumber;
      }
    ] & {
      long: [BigNumber, BigNumber, BigNumber] & {
        supply: BigNumber;
        settlementBalance: BigNumber;
        pendingBurnPoolTokens: BigNumber;
      };
      short: [BigNumber, BigNumber, BigNumber] & {
        supply: BigNumber;
        settlementBalance: BigNumber;
        pendingBurnPoolTokens: BigNumber;
      };
    }
  >;

  callStatic: {
    fullCommitPeriod(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCommitQueue(
      committer: string,
      periods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        longMintSettlement: BigNumber;
        longBurnPoolTokens: BigNumber;
        shortMintSettlement: BigNumber;
        shortBurnPoolTokens: BigNumber;
        shortBurnLongMintPoolTokens: BigNumber;
        longBurnShortMintPoolTokens: BigNumber;
      })[]
    >;

    getExpectedState(
      pool: string,
      periods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        cumulativePendingMintSettlement: BigNumber;
        longSupply: BigNumber;
        longBalance: BigNumber;
        shortSupply: BigNumber;
        shortBalance: BigNumber;
        oraclePrice: BigNumber;
      }
    >;

    getPoolInfo(
      pool: string,
      committer: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          supply: BigNumber;
          settlementBalance: BigNumber;
          pendingBurnPoolTokens: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          supply: BigNumber;
          settlementBalance: BigNumber;
          pendingBurnPoolTokens: BigNumber;
        }
      ] & {
        long: [BigNumber, BigNumber, BigNumber] & {
          supply: BigNumber;
          settlementBalance: BigNumber;
          pendingBurnPoolTokens: BigNumber;
        };
        short: [BigNumber, BigNumber, BigNumber] & {
          supply: BigNumber;
          settlementBalance: BigNumber;
          pendingBurnPoolTokens: BigNumber;
        };
      }
    >;
  };

  filters: {};

  estimateGas: {
    fullCommitPeriod(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCommitQueue(
      committer: string,
      periods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpectedState(
      pool: string,
      periods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInfo(
      pool: string,
      committer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fullCommitPeriod(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCommitQueue(
      committer: string,
      periods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExpectedState(
      pool: string,
      periods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolInfo(
      pool: string,
      committer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
