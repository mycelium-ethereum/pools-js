/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IPoolCommitter2,
  IPoolCommitter2Interface,
} from "../IPoolCommitter2";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "AggregateBalanceUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "_burningFee",
        type: "uint256",
      },
    ],
    name: "BurningFeeSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "_changeInterval",
        type: "uint256",
      },
    ],
    name: "ChangeIntervalSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "Claim",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "enum IPoolCommitter.CommitType",
        name: "commitType",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "appropriateUpdateIntervalId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "fromAggregateBalance",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "payForClaim",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bytes16",
        name: "mintingFee",
        type: "bytes16",
      },
    ],
    name: "CreateCommit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "updateIntervalId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes16",
        name: "burningFee",
        type: "bytes16",
      },
    ],
    name: "ExecutedCommitsForInterval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_feeController",
        type: "address",
      },
    ],
    name: "FeeControllerSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "_mintingFee",
        type: "uint256",
      },
    ],
    name: "MintingFeeSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newPool",
        type: "address",
      },
    ],
    name: "PoolChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "burningFee",
    outputs: [
      {
        internalType: "bytes16",
        name: "",
        type: "bytes16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "args",
        type: "bytes32",
      },
    ],
    name: "commit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "lastPriceTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updateInterval",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "longBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "shortBalance",
        type: "uint256",
      },
    ],
    name: "executeCommitments",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getAggregateBalance",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "longTokens",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortTokens",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "settlementTokens",
            type: "uint256",
          },
        ],
        internalType: "struct IPoolCommitter.Balance",
        name: "_balance",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAppropriateUpdateIntervalId",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "_autoClaim",
        type: "address",
      },
      {
        internalType: "address",
        name: "_factoryOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_feeController",
        type: "address",
      },
      {
        internalType: "address",
        name: "_invariantCheck",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "mintingFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "burningFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_changeInterval",
        type: "uint256",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPoolCommitter.CommitType",
        name: "t",
        type: "uint8",
      },
    ],
    name: "isBurn",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPoolCommitter.CommitType",
        name: "t",
        type: "uint8",
      },
    ],
    name: "isLong",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPoolCommitter.CommitType",
        name: "t",
        type: "uint8",
      },
    ],
    name: "isMint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPoolCommitter.CommitType",
        name: "t",
        type: "uint8",
      },
    ],
    name: "isShort",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "mintingFee",
    outputs: [
      {
        internalType: "bytes16",
        name: "",
        type: "bytes16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingLongBurnPoolTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingMintSettlementAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingShortBurnPoolTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_burningFee",
        type: "uint256",
      },
    ],
    name: "setBurningFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_changeInterval",
        type: "uint256",
      },
    ],
    name: "setChangeInterval",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_feeController",
        type: "address",
      },
    ],
    name: "setFeeController",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_mintingFee",
        type: "uint256",
      },
    ],
    name: "setMintingFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_leveragedPool",
        type: "address",
      },
    ],
    name: "setPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_updateIntervalId",
        type: "uint256",
      },
    ],
    name: "totalPoolCommitments",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "longMintSettlement",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "longBurnPoolTokens",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortMintSettlement",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortBurnPoolTokens",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortBurnLongMintPoolTokens",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "longBurnShortMintPoolTokens",
            type: "uint256",
          },
        ],
        internalType: "struct IPoolCommitter.TotalCommitment",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "updateAggregateBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updateIntervalId",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IPoolCommitter2__factory {
  static readonly abi = _abi;
  static createInterface(): IPoolCommitter2Interface {
    return new utils.Interface(_abi) as IPoolCommitter2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IPoolCommitter2 {
    return new Contract(address, _abi, signerOrProvider) as IPoolCommitter2;
  }
}
