/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PoolStateHelperInterface extends ethers.utils.Interface {
  functions: {
    "LONG_INDEX()": FunctionFragment;
    "SHORT_INDEX()": FunctionFragment;
    "calculateValueTransfer(int256,int256,((uint256,uint256,uint256),(uint256,uint256,uint256)),bytes16,bytes16)": FunctionFragment;
    "executeCommitsForSide((uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256),uint256,uint256)": FunctionFragment;
    "executeGivenCommit((uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256,uint256),(uint256,uint256,uint256)),bytes16,bytes16)": FunctionFragment;
    "executeInstantSettlements((uint256,uint256,uint256,uint256,uint256,uint256),((uint256,uint256,uint256),(uint256,uint256,uint256)),bytes16,bytes16)": FunctionFragment;
    "fullCommitPeriod(address)": FunctionFragment;
    "getCommitQueue(address,uint256)": FunctionFragment;
    "getExpectedState(address,uint256)": FunctionFragment;
    "getNewPrice((int256[],uint256),int256)": FunctionFragment;
    "getPoolInfo(address,address)": FunctionFragment;
    "getPrice((uint256,uint256,uint256))": FunctionFragment;
    "getSMAPrices(address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isSMAOracle(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "LONG_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SHORT_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateValueTransfer",
    values: [
      BigNumberish,
      BigNumberish,
      {
        long: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
        short: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
      },
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeCommitsForSide",
    values: [
      {
        longMintSettlement: BigNumberish;
        longBurnPoolTokens: BigNumberish;
        shortMintSettlement: BigNumberish;
        shortBurnPoolTokens: BigNumberish;
        shortBurnLongMintPoolTokens: BigNumberish;
        longBurnShortMintPoolTokens: BigNumberish;
      },
      {
        supply: BigNumberish;
        settlementBalance: BigNumberish;
        pendingBurnPoolTokens: BigNumberish;
      },
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeGivenCommit",
    values: [
      {
        longMintSettlement: BigNumberish;
        longBurnPoolTokens: BigNumberish;
        shortMintSettlement: BigNumberish;
        shortBurnPoolTokens: BigNumberish;
        shortBurnLongMintPoolTokens: BigNumberish;
        longBurnShortMintPoolTokens: BigNumberish;
      },
      {
        long: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
        short: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
      },
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeInstantSettlements",
    values: [
      {
        longMintSettlement: BigNumberish;
        longBurnPoolTokens: BigNumberish;
        shortMintSettlement: BigNumberish;
        shortBurnPoolTokens: BigNumberish;
        shortBurnLongMintPoolTokens: BigNumberish;
        longBurnShortMintPoolTokens: BigNumberish;
      },
      {
        long: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
        short: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
      },
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fullCommitPeriod",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommitQueue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpectedState",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNewPrice",
    values: [{ prices: BigNumberish[]; numPeriods: BigNumberish }, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [
      {
        supply: BigNumberish;
        settlementBalance: BigNumberish;
        pendingBurnPoolTokens: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSMAPrices",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isSMAOracle", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "LONG_INDEX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SHORT_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateValueTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeCommitsForSide",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeGivenCommit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeInstantSettlements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fullCommitPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommitQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpectedState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNewPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSMAPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSMAOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string] & { previousAdmin: string; newAdmin: string }
>;

export type BeaconUpgradedEvent = TypedEvent<[string] & { beacon: string }>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type UpgradedEvent = TypedEvent<[string] & { implementation: string }>;

export class PoolStateHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PoolStateHelperInterface;

  functions: {
    LONG_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    SHORT_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateValueTransfer(
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      poolInfo: {
        long: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
        short: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
      },
      leverageAmount: BytesLike,
      poolManagementFee: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          }
        ] & {
          long: [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          };
          short: [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          };
        }
      ] & {
        newPoolInfo: [
          [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          }
        ] & {
          long: [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          };
          short: [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          };
        };
      }
    >;

    executeCommitsForSide(
      totalCommitment: {
        longMintSettlement: BigNumberish;
        longBurnPoolTokens: BigNumberish;
        shortMintSettlement: BigNumberish;
        shortBurnPoolTokens: BigNumberish;
        shortBurnLongMintPoolTokens: BigNumberish;
        longBurnShortMintPoolTokens: BigNumberish;
      },
      side: {
        supply: BigNumberish;
        settlementBalance: BigNumberish;
        pendingBurnPoolTokens: BigNumberish;
      },
      shortBurnInstantMintSettlement: BigNumberish,
      totalBurnPoolTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        mintedPoolTokens: BigNumber;
        burnedPooltokens: BigNumber;
      }
    >;

    executeGivenCommit(
      totalCommitment: {
        longMintSettlement: BigNumberish;
        longBurnPoolTokens: BigNumberish;
        shortMintSettlement: BigNumberish;
        shortBurnPoolTokens: BigNumberish;
        shortBurnLongMintPoolTokens: BigNumberish;
        longBurnShortMintPoolTokens: BigNumberish;
      },
      poolInfo: {
        long: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
        short: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
      },
      burningFee: BytesLike,
      mintingFee: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          }
        ] & {
          long: [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          };
          short: [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          };
        }
      ] & {
        newPoolInfo: [
          [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          }
        ] & {
          long: [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          };
          short: [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          };
        };
      }
    >;

    executeInstantSettlements(
      totalCommitment: {
        longMintSettlement: BigNumberish;
        longBurnPoolTokens: BigNumberish;
        shortMintSettlement: BigNumberish;
        shortBurnPoolTokens: BigNumberish;
        shortBurnLongMintPoolTokens: BigNumberish;
        longBurnShortMintPoolTokens: BigNumberish;
      },
      poolInfo: {
        long: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
        short: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
      },
      burningFee: BytesLike,
      mintingFee: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        longBurnInstantMintSettlement: BigNumber;
        shortBurnInstantMintSettlement: BigNumber;
      }
    >;

    fullCommitPeriod(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCommitQueue(
      committer: string,
      periods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          longMintSettlement: BigNumber;
          longBurnPoolTokens: BigNumber;
          shortMintSettlement: BigNumber;
          shortBurnPoolTokens: BigNumber;
          shortBurnLongMintPoolTokens: BigNumber;
          longBurnShortMintPoolTokens: BigNumber;
        })[]
      ] & {
        commitQueue: ([
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          longMintSettlement: BigNumber;
          longBurnPoolTokens: BigNumber;
          shortMintSettlement: BigNumber;
          shortBurnPoolTokens: BigNumber;
          shortBurnLongMintPoolTokens: BigNumber;
          longBurnShortMintPoolTokens: BigNumber;
        })[];
      }
    >;

    getExpectedState(
      pool: string,
      periods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          cumulativePendingMintSettlement: BigNumber;
          longSupply: BigNumber;
          longBalance: BigNumber;
          shortSupply: BigNumber;
          shortBalance: BigNumber;
          oraclePrice: BigNumber;
        }
      ] & {
        finalExpectedPoolState: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          cumulativePendingMintSettlement: BigNumber;
          longSupply: BigNumber;
          longBalance: BigNumber;
          shortSupply: BigNumber;
          shortBalance: BigNumber;
          oraclePrice: BigNumber;
        };
      }
    >;

    getNewPrice(
      smaInfo: { prices: BigNumberish[]; numPeriods: BigNumberish },
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber[], BigNumber] & {
          prices: BigNumber[];
          numPeriods: BigNumber;
        }
      ] & {
        updatedSmaInfo: [BigNumber[], BigNumber] & {
          prices: BigNumber[];
          numPeriods: BigNumber;
        };
      }
    >;

    getPoolInfo(
      pool: string,
      committer: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          }
        ] & {
          long: [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          };
          short: [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          };
        }
      ] & {
        poolInfo: [
          [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          }
        ] & {
          long: [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          };
          short: [BigNumber, BigNumber, BigNumber] & {
            supply: BigNumber;
            settlementBalance: BigNumber;
            pendingBurnPoolTokens: BigNumber;
          };
        };
      }
    >;

    getPrice(
      sideInfo: {
        supply: BigNumberish;
        settlementBalance: BigNumberish;
        pendingBurnPoolTokens: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSMAPrices(
      smaOracle: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber[], BigNumber] & {
          prices: BigNumber[];
          numPeriods: BigNumber;
        }
      ] & {
        smaInfo: [BigNumber[], BigNumber] & {
          prices: BigNumber[];
          numPeriods: BigNumber;
        };
      }
    >;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isSMAOracle(
      oracle: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { result: boolean }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  LONG_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  SHORT_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  calculateValueTransfer(
    oldPrice: BigNumberish,
    newPrice: BigNumberish,
    poolInfo: {
      long: {
        supply: BigNumberish;
        settlementBalance: BigNumberish;
        pendingBurnPoolTokens: BigNumberish;
      };
      short: {
        supply: BigNumberish;
        settlementBalance: BigNumberish;
        pendingBurnPoolTokens: BigNumberish;
      };
    },
    leverageAmount: BytesLike,
    poolManagementFee: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber] & {
        supply: BigNumber;
        settlementBalance: BigNumber;
        pendingBurnPoolTokens: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber] & {
        supply: BigNumber;
        settlementBalance: BigNumber;
        pendingBurnPoolTokens: BigNumber;
      }
    ] & {
      long: [BigNumber, BigNumber, BigNumber] & {
        supply: BigNumber;
        settlementBalance: BigNumber;
        pendingBurnPoolTokens: BigNumber;
      };
      short: [BigNumber, BigNumber, BigNumber] & {
        supply: BigNumber;
        settlementBalance: BigNumber;
        pendingBurnPoolTokens: BigNumber;
      };
    }
  >;

  executeCommitsForSide(
    totalCommitment: {
      longMintSettlement: BigNumberish;
      longBurnPoolTokens: BigNumberish;
      shortMintSettlement: BigNumberish;
      shortBurnPoolTokens: BigNumberish;
      shortBurnLongMintPoolTokens: BigNumberish;
      longBurnShortMintPoolTokens: BigNumberish;
    },
    side: {
      supply: BigNumberish;
      settlementBalance: BigNumberish;
      pendingBurnPoolTokens: BigNumberish;
    },
    shortBurnInstantMintSettlement: BigNumberish,
    totalBurnPoolTokens: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      mintedPoolTokens: BigNumber;
      burnedPooltokens: BigNumber;
    }
  >;

  executeGivenCommit(
    totalCommitment: {
      longMintSettlement: BigNumberish;
      longBurnPoolTokens: BigNumberish;
      shortMintSettlement: BigNumberish;
      shortBurnPoolTokens: BigNumberish;
      shortBurnLongMintPoolTokens: BigNumberish;
      longBurnShortMintPoolTokens: BigNumberish;
    },
    poolInfo: {
      long: {
        supply: BigNumberish;
        settlementBalance: BigNumberish;
        pendingBurnPoolTokens: BigNumberish;
      };
      short: {
        supply: BigNumberish;
        settlementBalance: BigNumberish;
        pendingBurnPoolTokens: BigNumberish;
      };
    },
    burningFee: BytesLike,
    mintingFee: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber] & {
        supply: BigNumber;
        settlementBalance: BigNumber;
        pendingBurnPoolTokens: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber] & {
        supply: BigNumber;
        settlementBalance: BigNumber;
        pendingBurnPoolTokens: BigNumber;
      }
    ] & {
      long: [BigNumber, BigNumber, BigNumber] & {
        supply: BigNumber;
        settlementBalance: BigNumber;
        pendingBurnPoolTokens: BigNumber;
      };
      short: [BigNumber, BigNumber, BigNumber] & {
        supply: BigNumber;
        settlementBalance: BigNumber;
        pendingBurnPoolTokens: BigNumber;
      };
    }
  >;

  executeInstantSettlements(
    totalCommitment: {
      longMintSettlement: BigNumberish;
      longBurnPoolTokens: BigNumberish;
      shortMintSettlement: BigNumberish;
      shortBurnPoolTokens: BigNumberish;
      shortBurnLongMintPoolTokens: BigNumberish;
      longBurnShortMintPoolTokens: BigNumberish;
    },
    poolInfo: {
      long: {
        supply: BigNumberish;
        settlementBalance: BigNumberish;
        pendingBurnPoolTokens: BigNumberish;
      };
      short: {
        supply: BigNumberish;
        settlementBalance: BigNumberish;
        pendingBurnPoolTokens: BigNumberish;
      };
    },
    burningFee: BytesLike,
    mintingFee: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      longBurnInstantMintSettlement: BigNumber;
      shortBurnInstantMintSettlement: BigNumber;
    }
  >;

  fullCommitPeriod(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  getCommitQueue(
    committer: string,
    periods: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      longMintSettlement: BigNumber;
      longBurnPoolTokens: BigNumber;
      shortMintSettlement: BigNumber;
      shortBurnPoolTokens: BigNumber;
      shortBurnLongMintPoolTokens: BigNumber;
      longBurnShortMintPoolTokens: BigNumber;
    })[]
  >;

  getExpectedState(
    pool: string,
    periods: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      cumulativePendingMintSettlement: BigNumber;
      longSupply: BigNumber;
      longBalance: BigNumber;
      shortSupply: BigNumber;
      shortBalance: BigNumber;
      oraclePrice: BigNumber;
    }
  >;

  getNewPrice(
    smaInfo: { prices: BigNumberish[]; numPeriods: BigNumberish },
    spotPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      [BigNumber[], BigNumber] & { prices: BigNumber[]; numPeriods: BigNumber }
    ] & {
      updatedSmaInfo: [BigNumber[], BigNumber] & {
        prices: BigNumber[];
        numPeriods: BigNumber;
      };
    }
  >;

  getPoolInfo(
    pool: string,
    committer: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber] & {
        supply: BigNumber;
        settlementBalance: BigNumber;
        pendingBurnPoolTokens: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber] & {
        supply: BigNumber;
        settlementBalance: BigNumber;
        pendingBurnPoolTokens: BigNumber;
      }
    ] & {
      long: [BigNumber, BigNumber, BigNumber] & {
        supply: BigNumber;
        settlementBalance: BigNumber;
        pendingBurnPoolTokens: BigNumber;
      };
      short: [BigNumber, BigNumber, BigNumber] & {
        supply: BigNumber;
        settlementBalance: BigNumber;
        pendingBurnPoolTokens: BigNumber;
      };
    }
  >;

  getPrice(
    sideInfo: {
      supply: BigNumberish;
      settlementBalance: BigNumberish;
      pendingBurnPoolTokens: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  getSMAPrices(
    smaOracle: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber] & { prices: BigNumber[]; numPeriods: BigNumber }
  >;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isSMAOracle(oracle: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    LONG_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    SHORT_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    calculateValueTransfer(
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      poolInfo: {
        long: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
        short: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
      },
      leverageAmount: BytesLike,
      poolManagementFee: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          supply: BigNumber;
          settlementBalance: BigNumber;
          pendingBurnPoolTokens: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          supply: BigNumber;
          settlementBalance: BigNumber;
          pendingBurnPoolTokens: BigNumber;
        }
      ] & {
        long: [BigNumber, BigNumber, BigNumber] & {
          supply: BigNumber;
          settlementBalance: BigNumber;
          pendingBurnPoolTokens: BigNumber;
        };
        short: [BigNumber, BigNumber, BigNumber] & {
          supply: BigNumber;
          settlementBalance: BigNumber;
          pendingBurnPoolTokens: BigNumber;
        };
      }
    >;

    executeCommitsForSide(
      totalCommitment: {
        longMintSettlement: BigNumberish;
        longBurnPoolTokens: BigNumberish;
        shortMintSettlement: BigNumberish;
        shortBurnPoolTokens: BigNumberish;
        shortBurnLongMintPoolTokens: BigNumberish;
        longBurnShortMintPoolTokens: BigNumberish;
      },
      side: {
        supply: BigNumberish;
        settlementBalance: BigNumberish;
        pendingBurnPoolTokens: BigNumberish;
      },
      shortBurnInstantMintSettlement: BigNumberish,
      totalBurnPoolTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        mintedPoolTokens: BigNumber;
        burnedPooltokens: BigNumber;
      }
    >;

    executeGivenCommit(
      totalCommitment: {
        longMintSettlement: BigNumberish;
        longBurnPoolTokens: BigNumberish;
        shortMintSettlement: BigNumberish;
        shortBurnPoolTokens: BigNumberish;
        shortBurnLongMintPoolTokens: BigNumberish;
        longBurnShortMintPoolTokens: BigNumberish;
      },
      poolInfo: {
        long: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
        short: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
      },
      burningFee: BytesLike,
      mintingFee: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          supply: BigNumber;
          settlementBalance: BigNumber;
          pendingBurnPoolTokens: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          supply: BigNumber;
          settlementBalance: BigNumber;
          pendingBurnPoolTokens: BigNumber;
        }
      ] & {
        long: [BigNumber, BigNumber, BigNumber] & {
          supply: BigNumber;
          settlementBalance: BigNumber;
          pendingBurnPoolTokens: BigNumber;
        };
        short: [BigNumber, BigNumber, BigNumber] & {
          supply: BigNumber;
          settlementBalance: BigNumber;
          pendingBurnPoolTokens: BigNumber;
        };
      }
    >;

    executeInstantSettlements(
      totalCommitment: {
        longMintSettlement: BigNumberish;
        longBurnPoolTokens: BigNumberish;
        shortMintSettlement: BigNumberish;
        shortBurnPoolTokens: BigNumberish;
        shortBurnLongMintPoolTokens: BigNumberish;
        longBurnShortMintPoolTokens: BigNumberish;
      },
      poolInfo: {
        long: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
        short: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
      },
      burningFee: BytesLike,
      mintingFee: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        longBurnInstantMintSettlement: BigNumber;
        shortBurnInstantMintSettlement: BigNumber;
      }
    >;

    fullCommitPeriod(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCommitQueue(
      committer: string,
      periods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        longMintSettlement: BigNumber;
        longBurnPoolTokens: BigNumber;
        shortMintSettlement: BigNumber;
        shortBurnPoolTokens: BigNumber;
        shortBurnLongMintPoolTokens: BigNumber;
        longBurnShortMintPoolTokens: BigNumber;
      })[]
    >;

    getExpectedState(
      pool: string,
      periods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        cumulativePendingMintSettlement: BigNumber;
        longSupply: BigNumber;
        longBalance: BigNumber;
        shortSupply: BigNumber;
        shortBalance: BigNumber;
        oraclePrice: BigNumber;
      }
    >;

    getNewPrice(
      smaInfo: { prices: BigNumberish[]; numPeriods: BigNumberish },
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber[], BigNumber] & {
          prices: BigNumber[];
          numPeriods: BigNumber;
        }
      ] & {
        updatedSmaInfo: [BigNumber[], BigNumber] & {
          prices: BigNumber[];
          numPeriods: BigNumber;
        };
      }
    >;

    getPoolInfo(
      pool: string,
      committer: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          supply: BigNumber;
          settlementBalance: BigNumber;
          pendingBurnPoolTokens: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          supply: BigNumber;
          settlementBalance: BigNumber;
          pendingBurnPoolTokens: BigNumber;
        }
      ] & {
        long: [BigNumber, BigNumber, BigNumber] & {
          supply: BigNumber;
          settlementBalance: BigNumber;
          pendingBurnPoolTokens: BigNumber;
        };
        short: [BigNumber, BigNumber, BigNumber] & {
          supply: BigNumber;
          settlementBalance: BigNumber;
          pendingBurnPoolTokens: BigNumber;
        };
      }
    >;

    getPrice(
      sideInfo: {
        supply: BigNumberish;
        settlementBalance: BigNumberish;
        pendingBurnPoolTokens: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    getSMAPrices(
      smaOracle: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber] & { prices: BigNumber[]; numPeriods: BigNumber }
    >;

    initialize(overrides?: CallOverrides): Promise<void>;

    isSMAOracle(oracle: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    BeaconUpgraded(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Upgraded(address)"(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;

    Upgraded(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;
  };

  estimateGas: {
    LONG_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    SHORT_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    calculateValueTransfer(
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      poolInfo: {
        long: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
        short: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
      },
      leverageAmount: BytesLike,
      poolManagementFee: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeCommitsForSide(
      totalCommitment: {
        longMintSettlement: BigNumberish;
        longBurnPoolTokens: BigNumberish;
        shortMintSettlement: BigNumberish;
        shortBurnPoolTokens: BigNumberish;
        shortBurnLongMintPoolTokens: BigNumberish;
        longBurnShortMintPoolTokens: BigNumberish;
      },
      side: {
        supply: BigNumberish;
        settlementBalance: BigNumberish;
        pendingBurnPoolTokens: BigNumberish;
      },
      shortBurnInstantMintSettlement: BigNumberish,
      totalBurnPoolTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeGivenCommit(
      totalCommitment: {
        longMintSettlement: BigNumberish;
        longBurnPoolTokens: BigNumberish;
        shortMintSettlement: BigNumberish;
        shortBurnPoolTokens: BigNumberish;
        shortBurnLongMintPoolTokens: BigNumberish;
        longBurnShortMintPoolTokens: BigNumberish;
      },
      poolInfo: {
        long: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
        short: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
      },
      burningFee: BytesLike,
      mintingFee: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeInstantSettlements(
      totalCommitment: {
        longMintSettlement: BigNumberish;
        longBurnPoolTokens: BigNumberish;
        shortMintSettlement: BigNumberish;
        shortBurnPoolTokens: BigNumberish;
        shortBurnLongMintPoolTokens: BigNumberish;
        longBurnShortMintPoolTokens: BigNumberish;
      },
      poolInfo: {
        long: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
        short: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
      },
      burningFee: BytesLike,
      mintingFee: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fullCommitPeriod(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCommitQueue(
      committer: string,
      periods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpectedState(
      pool: string,
      periods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNewPrice(
      smaInfo: { prices: BigNumberish[]; numPeriods: BigNumberish },
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInfo(
      pool: string,
      committer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      sideInfo: {
        supply: BigNumberish;
        settlementBalance: BigNumberish;
        pendingBurnPoolTokens: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSMAPrices(
      smaOracle: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isSMAOracle(oracle: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LONG_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SHORT_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateValueTransfer(
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      poolInfo: {
        long: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
        short: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
      },
      leverageAmount: BytesLike,
      poolManagementFee: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeCommitsForSide(
      totalCommitment: {
        longMintSettlement: BigNumberish;
        longBurnPoolTokens: BigNumberish;
        shortMintSettlement: BigNumberish;
        shortBurnPoolTokens: BigNumberish;
        shortBurnLongMintPoolTokens: BigNumberish;
        longBurnShortMintPoolTokens: BigNumberish;
      },
      side: {
        supply: BigNumberish;
        settlementBalance: BigNumberish;
        pendingBurnPoolTokens: BigNumberish;
      },
      shortBurnInstantMintSettlement: BigNumberish,
      totalBurnPoolTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeGivenCommit(
      totalCommitment: {
        longMintSettlement: BigNumberish;
        longBurnPoolTokens: BigNumberish;
        shortMintSettlement: BigNumberish;
        shortBurnPoolTokens: BigNumberish;
        shortBurnLongMintPoolTokens: BigNumberish;
        longBurnShortMintPoolTokens: BigNumberish;
      },
      poolInfo: {
        long: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
        short: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
      },
      burningFee: BytesLike,
      mintingFee: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeInstantSettlements(
      totalCommitment: {
        longMintSettlement: BigNumberish;
        longBurnPoolTokens: BigNumberish;
        shortMintSettlement: BigNumberish;
        shortBurnPoolTokens: BigNumberish;
        shortBurnLongMintPoolTokens: BigNumberish;
        longBurnShortMintPoolTokens: BigNumberish;
      },
      poolInfo: {
        long: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
        short: {
          supply: BigNumberish;
          settlementBalance: BigNumberish;
          pendingBurnPoolTokens: BigNumberish;
        };
      },
      burningFee: BytesLike,
      mintingFee: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fullCommitPeriod(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCommitQueue(
      committer: string,
      periods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExpectedState(
      pool: string,
      periods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNewPrice(
      smaInfo: { prices: BigNumberish[]; numPeriods: BigNumberish },
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolInfo(
      pool: string,
      committer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      sideInfo: {
        supply: BigNumberish;
        settlementBalance: BigNumberish;
        pendingBurnPoolTokens: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSMAPrices(
      smaOracle: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isSMAOracle(
      oracle: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
